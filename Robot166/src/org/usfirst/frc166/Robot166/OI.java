// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc166.Robot166;

import org.usfirst.frc166.Robot166.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {

    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton manualFireButton;
    public JoystickButton passBallButton;
    public Joystick leftDriveJoy;
    public JoystickButton autoFeedButton;
    public JoystickButton shiftHighSpeedButton;
    public JoystickButton shiftLowSpeedButton;
    public JoystickButton alignDistance;
    public Joystick rightDriveJoy;
    public Joystick copilotJoy;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        copilotJoy = new Joystick(3);

        rightDriveJoy = new Joystick(2);

        alignDistance = new JoystickButton(rightDriveJoy, 2);
        alignDistance.whenPressed(new AlignToShootDistance());
        shiftLowSpeedButton = new JoystickButton(rightDriveJoy, 4);
        shiftLowSpeedButton.whenPressed(new ShiftTransmissionPower());
        shiftHighSpeedButton = new JoystickButton(rightDriveJoy, 5);
        shiftHighSpeedButton.whenPressed(new ShiftTransmissionSpeed());
        autoFeedButton = new JoystickButton(rightDriveJoy, 3);
        autoFeedButton.whenPressed(new AutoFeed());
        leftDriveJoy = new Joystick(1);

        passBallButton = new JoystickButton(leftDriveJoy, 2);
        passBallButton.whenPressed(new PassBall());
        manualFireButton = new JoystickButton(leftDriveJoy, 1);
        manualFireButton.whenPressed(new AutoShoot());

        // SmartDashboard Buttons
        SmartDashboard.putData("AutonomousWait", new AutonomousWait());
        SmartDashboard.putData("Perform Autonomous", new PerformAutonomous());
//        SmartDashboard.putData("Tank Drive", new TankDrive());
//        SmartDashboard.putData("Drive Straight", new DriveStraight());
        //SmartDashboard.putData("Control Shoulder With Joystick", new ControlShoulderWithJoystick());
        SmartDashboard.putData("Move Shoulder To Out Position", new MoveShoulderToOutPosition());
        SmartDashboard.putData("Move Shoulder To In Position", new MoveShoulderToInPosition());
//        SmartDashboard.putData("Wait For Ball Acquired", new WaitForBallAcquired());
        SmartDashboard.putData("Spin Roller To Retrieve Ball", new SpinRollerToRetrieveBall());
        SmartDashboard.putData("Spin Roller To Eject Ball", new SpinRollerToEjectBall());
        SmartDashboard.putData("Stop Roller Spinning", new StopRollerSpinning());
        SmartDashboard.putData("Pull Shooter Back", new PullShooterBack());
        SmartDashboard.putData("Release Shooter", new ReleaseShooter());
//        SmartDashboard.putData("Fire Shooter", new FireShooter());
        SmartDashboard.putData("Make Shooter Safe", new MakeShooterSafe());
//        SmartDashboard.putData("Shift Transmission Power", new ShiftTransmissionPower());
//        SmartDashboard.putData("Shift Transmission Speed", new ShiftTransmissionSpeed());
        SmartDashboard.putData("Auto Feed", new AutoFeed());
        SmartDashboard.putData("Auto Shoot", new AutoShoot());
        SmartDashboard.putData("Pass Ball", new PassBall());
//        SmartDashboard.putData("Wait For Ball Loaded", new WaitForBallLoaded());
        SmartDashboard.putData("Move Ball Manipulator Up", new MoveBallManipulatorUp());
        SmartDashboard.putData("Move Ball Manipulator Down", new MoveBallManipulatorDown());
        SmartDashboard.putData("Align To Shoot Distance", new AlignToShootDistance());
        SmartDashboard.putData("DriveStraightNoSonar", new DriveStraightNoSonar());
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getLeftDriveJoy() {
        return leftDriveJoy;
    }

    public Joystick getRightDriveJoy() {
        return rightDriveJoy;
    }

    public Joystick getCopilotJoy() {
        return copilotJoy;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
