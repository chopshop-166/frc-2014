// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc166.Robot166.subsystems;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.StartCommand;
import org.usfirst.frc166.Robot166.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class Timing extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private static final double MATCH_LENGTH = 20;

    private double autonomousLength;
    private double autonomousStartTime;
    private double teleopLength;
    private double teleopStartTime;

    private boolean wasMakeShooterSafeRun = false;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new WaitForTime());
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

    /**
     * Set the length of the autonomous period
     * The teleop portion will be determined by subtracting the autonomous
     * length from 120 seconds
     *
     * @param duration The length of the autonomous period (in seconds)
     */
    public void setAutonomousLength(double duration) {
        autonomousLength = duration;
        teleopLength = MATCH_LENGTH - duration;
    }

    /**
     * Set up the timing subsystem for the autonomous period
     */
    public void autonomousStart() {
        autonomousStartTime = Timer.getFPGATimestamp();
    }

    /**
     * Get the time left until autonomous is done
     *
     * @return The number of seconds left in the autonomous period
     */
    public double getRemainingAutonomousTime() {
        return autonomousLength - (Timer.getFPGATimestamp() - autonomousStartTime);
    }

    /**
     * Set up the timing subsystem for the teleop period
     */
    public void teleopStart() {
        teleopStartTime = Timer.getFPGATimestamp();
        wasMakeShooterSafeRun = false;
    }

    /**
     * Get the time left until teleop is done
     *
     * @return The number of seconds left in the teleop period
     */
    public double getRemainingTeleopTime() {
        return teleopLength - (Timer.getFPGATimestamp() - teleopStartTime);
    }

    /**
     * Starts the command to make the shooter safe.
     */
    public void makeShooterSafe() {
        if (!wasMakeShooterSafeRun) {
            new StartCommand(new MakeShooterSafe()).start();
            wasMakeShooterSafeRun = true;
        }
    }
}
