// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc166.Robot166.subsystems;

import org.usfirst.frc166.Robot166.RobotMap;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc166.Robot166.commands.CheckShoulderPosition;

public class Shoulder extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController motor = RobotMap.shoulderMotor;
    AnalogChannel potentiometer = RobotMap.shoulderPotentiometer;
    DigitalInput ballAcquiredLimit = RobotMap.shoulderBallAcquiredLimit;
    DigitalInput outGuardLimit = RobotMap.shoulderOutGuardLimit;
    DigitalInput inGuardLimt = RobotMap.shoulderInGuardLimt;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATION
    private Position currentPosition = Position.Unknown;
    public static final double SHOULDER_SPEED = .6;
    public static final double SHOULDER_OUT_SPEED = .3;
    public static final double HOME_POSITION_HIGH = 2.448;
    public static final double HOME_POSITION_LOW = 2.37;
    public static final double IN_POSITION_HIGH = 2.364;
    public static final double OUT_POSITION_LOW = 2.601;

    public static class Position {

        private static final int UnknownValue = 0;
        private static final int InValue = 1;
        private static final int OutValue = 2;
        private static final int HomeValue = 3;
        public static final Position Unknown = new Position(UnknownValue);
        public static final Position In = new Position(InValue);
        public static final Position Out = new Position(OutValue);
        public static final Position Home = new Position(HomeValue);
        public final int value;

        private Position(int value) {
            this.value = value;
        }
    }

    // Put methods for controlling this subsystem
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new CheckShoulderPosition());
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

    public boolean isHomePosition() {
        return (getPotentiometerValue() >= HOME_POSITION_LOW && getPotentiometerValue() <= HOME_POSITION_HIGH);
    }

    public boolean isShoulderOut() {
        return outGuardLimit.get() || getPotentiometerValue() >= OUT_POSITION_LOW;
    }

    public boolean isShoulderIn() {
        return !inGuardLimt.get() || getPotentiometerValue() <= IN_POSITION_HIGH;
    }

    public void setCurrentPosition(Position newPosition) {
        currentPosition = newPosition;
    }

    public Position getCurrentPosition() {
        return currentPosition;
    }

    private double getPotentiometerValue() {
        return potentiometer.getVoltage();
    }

    public void stop() {
        motor.set(0);
    }

    public void moveToHome() {
        if (getPotentiometerValue() > HOME_POSITION_HIGH) {
            moveToInPosition();
        }
        if (getPotentiometerValue() < HOME_POSITION_LOW) {
            moveToOutPosition();
        }
    }

    public void moveToOutPosition() {
        motor.set(SHOULDER_OUT_SPEED);
    }

    public void moveToInPosition() {
        motor.set(SHOULDER_SPEED * -1);
    }

    public void shoulderDrive(Joystick shoulderJoy) {
        motor.set(shoulderJoy.getAxis(Joystick.AxisType.kY));
    }

    public boolean isBallAcquired() {
        return !ballAcquiredLimit.get();
    }
}
