// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc166.Robot166.subsystems;

import org.usfirst.frc166.Robot166.RobotMap;
import org.usfirst.frc166.Robot166.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc166.Robot166.Robot;

/**
 *
 */
public class Drive extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Gyro gyro = RobotMap.driveGyro;
    Accelerometer accelerometer = RobotMap.driveAccelerometer;
    Ultrasonic ultrasonic = RobotMap.driveUltrasonic;
    SpeedController leftvictor1 = RobotMap.driveLeftvictor1;
    SpeedController leftvictor2 = RobotMap.driveLeftvictor2;
    SpeedController rightvictor1 = RobotMap.driveRightvictor1;
    SpeedController rightvictor2 = RobotMap.driveRightvictor2;
    RobotDrive driveVictors = RobotMap.driveDriveVictors;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private static final double DRIVE_SPEED = 0.75;
    private static final double DRIVE_TURN_CONSTANT = 0.60;

    public void TankDrive4() {
        driveVictors.tankDrive(Robot.oi.leftDriveJoy,
                Robot.oi.rightDriveJoy);
    }

    public void DriveStraight() {
        if (Robot.drive.gyro.getAngle() != 0) {
            if ((Robot.drive.gyro.getAngle() % 360) - 180 > 0) {
                driveVictors.drive(DRIVE_SPEED, -DRIVE_TURN_CONSTANT);
            }
            else if ((Robot.drive.gyro.getAngle() % 360) - 180 < 0) {
                driveVictors.drive(DRIVE_SPEED, DRIVE_TURN_CONSTANT);
            }
            else {
                driveVictors.drive(DRIVE_SPEED, DRIVE_TURN_CONSTANT);
            }
        }
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new TankDrive());
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
}
